#!/usr/bin/python
import serial
import hal
import sys
import time

PORT = "/dev/ttyUSB0"
ser = serial.Serial(PORT, 115200, timeout=.5)

#Now we create the HAL component and its pins
## HAL_IN arduino can read the from linuxCNC
## HAL_OUT arduino can write to linuxCNC

c = hal.component("STM_IO")

for port in range(48):
  c.newpin("IN.%02d" %port,hal.HAL_BIT,hal.HAL_OUT)
  c.newpin("OUT.%02d" %port,hal.HAL_BIT,hal.HAL_IN)


time.sleep(1)
c.ready()

key = ''
try:
  while 1:

    #Check to see if we have a message waiting from the Arduino
    while ser.inWaiting():
      #This should be set to the length of whatever fixed-length message
      #you're sending from the arduino. It does not have to be the same length
      #as the outbound messages.
      key = ser.read(6)
      #The Arduino generates two different key events
      #One when the key is pressed down (+S) and another when it is released (-S)
      #In this case we are going to ignore the release
	
    inData =0
    sendData = 0
    if len(key) == 6:
        for i in range(6):
	    inData = inData | ( ord(key[i]) << (8*i))

    for ports in range(48):
        if c['IN.%02d' %ports] != (inData >> ports) & 0x01 :
		print "PORT" + str(ports) + "Changed"
		c['IN.%02d' %ports] = (inData >> ports) & 0x01

	sendData = sendData | (c['OUT.%02d' %ports] << ports)

    sendString = '';
    #for i in range(6):
	#sendString += ( (sendData >> (8*i)) & 0xFF )
    a = bytearray()
    for i in range(6):
	a.append(( (sendData >> (8*i)) & 0xFF ))

    a = ser.write(a)
    del a
    
    time.sleep(.03)

except KeyboardInterrupt:
    ser.write("-P;");
    raise SystemExit
