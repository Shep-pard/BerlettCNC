
#First load the Python user module
loadusr -Wn STM_IO /home/berlett/linuxcnc/configs/my_LinuxCNC_machine/STM_IO

#Second 'unlinkp' our pins to make them available for use.
# Then use 'net' to recreate/hook into them.

#net 


#net my-jogspeed halui.axis.jog-speed <= arduino.speed
#net my-jogxminus halui.axis.x.minus <= arduino.x-minus
##net my-jogxplus halui.axis.x.plus <= arduino.x-plus
#net my-jogyminus halui.axis.y.minus <= arduino.y-minus
#net my-jogyplus halui.axis.y.plus <= arduino.y-plus

# Spindle power
#unlinkp spindle.0.on
#net spindle-On arduino.spindleEnable <= spindle.0.on

# Stop
#unlinkp iocontrol.0.user-enable-out
#net estop-out arduino.stop

#unlinkp joint.0.motor-pos-cmd
#net xpos-cmd joint.0.motor-pos-cmd => arduino.axis0-cmd

#unlinkp joint.1.motor-pos-cmd
#net ypos-cmd joint.1.motor-pos-cmd => arduino.axis1-cmd

#unlinkp joint.2.motor-pos-cmd
#net zpos-cmd joint.2.motor-pos-cmd => arduino.axis2-cmd


# create nets for all Buttons
net key-01     <= STM_IO.IN.36 
net key-001    <= STM_IO.IN.33 
net key-0001   <= STM_IO.IN.35 
net key-A-     <= STM_IO.IN.39 
net key-A+     <= STM_IO.IN.42 
net key-X-     <= STM_IO.IN.10
net key-X+     <= STM_IO.IN.38 
net key-Y-     <= STM_IO.IN.16 
net key-Y+     <= STM_IO.IN.14 
net key-Z-     <= STM_IO.IN.12 
net key-Z+     <= STM_IO.IN.43 
net key-JogLck <= STM_IO.IN.34 
net key-LockX  <= STM_IO.IN.24 
net key-LockY  <= STM_IO.IN.40 
net key-LockZ  <= STM_IO.IN.11
net key-LLkX   <= STM_IO.IN.31
net key-RLkX   <= STM_IO.IN.25 
net key-SpdlL  <= STM_IO.IN.23
net key-SpdlR  <= STM_IO.IN.15 
net key-TlChng <= STM_IO.IN.46 
net key-Flood  <= STM_IO.IN.41
net key-MMS    <= STM_IO.IN.30
net key-Spare1 <= STM_IO.IN.44 
net key-Spare2 <= STM_IO.IN.47 
net key-Spare3 <= STM_IO.IN.27 
net key-Spare4 <= STM_IO.IN.28
net key-Spare5 <= STM_IO.IN.18 
net key-Spare6 <= STM_IO.IN.21 
net key-Spare7 <= STM_IO.IN.19 
#
# create nets for all LEDs

net led-01      => STM_IO.OUT.39
net led-001     => STM_IO.OUT.12
net led-0001    => STM_IO.OUT.38
net led-A-      => STM_IO.OUT.09
net led-A+      => STM_IO.OUT.05
net led-X-      => STM_IO.OUT.24
net led-X+      => STM_IO.OUT.26
net led-Y-      => STM_IO.OUT.42
net led-Y+      => STM_IO.OUT.02
net led-Z-      => STM_IO.OUT.07
net led-Z+      => STM_IO.OUT.33
net led-JogLck  => 
net led-LockX   => STM_IO.OUT.22
net led-LockY   => STM_IO.OUT.25
net led-LockZ   => STM_IO.OUT.35
net led-LLkX    => STM_IO.OUT.21
net led-RLkX    => STM_IO.OUT.20
net led-SpdlL   => STM_IO.OUT.06
net led-SpdlR   => STM_IO.OUT.18
net led-TlChng  => STM_IO.OUT.15
net led-Flood   => STM_IO.OUT.08
net led-MMS     => STM_IO.OUT.14
net led-Spare1  => STM_IO.OUT.04
net led-Spare2  => STM_IO.OUT.11
net led-Spare3  => STM_IO.OUT.40
net led-Spare4  => STM_IO.OUT.23
net led-Spare5  => STM_IO.OUT.19
net led-Spare6  => STM_IO.OUT.10
net led-Spare7  => STM_IO.OUT.45




# setup the axis scale 

loadrt mux8 names=frtpnl.step-choice
addf frtpnl.step-choice servo-thread

net key-0001  => frtpnl.step-choice.sel0
net key-001   => frtpnl.step-choice.sel1
net key-01    => frtpnl.step-choice.sel2

setp frtpnl.step-choice.in1 0.001
setp frtpnl.step-choice.in2 0.01
setp frtpnl.step-choice.in4 0.1

net step-choice <= frtpnl.step-choice.out
net step-choice => axis.x.jog-scale
net step-choice => axis.y.jog-scale
net step-choice => axis.z.jog-scale

    # connect leds to buttons
net key-01     => led-01
net key-001    => led-001
net key-0001   => led-001




loadrt or2 names=frtpnl.sel-X,frtpnl.sel-Y,frtpnl.sel-Z

addf frtpnl.sel-X   servo-thread
addf frtpnl.sel-Y   servo-thread
addf frtpnl.sel-Z   servo-thread

net frtpnl.sel-X.in0  <=  key-X+
net frtpnl.sel-X.in1  <=  key-X-

net frtpnl.sel-Y.in0  <=  key-Y+
net frtpnl.sel-Y.in1  <=  key-Y-

net frtpnl.sel-Z.in0  <=  key-Z+
net frtpnl.sel-Z.in1  <=  key-Z-




net key-x <= hm2_7i92.0.TsHW.0.0.key-01
net key-x => hm2_7i92.0.TsHW.0.0.led-01
net key-x => shw.ena-x.in0
net ena-x shw.ena-x.out => axis.x.jog-enable

