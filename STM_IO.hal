
#First load the Python user module
loadusr -Wn STM_IO /home/berlett/linuxcnc/configs/my_LinuxCNC_machine/STM_IO

#Second 'unlinkp' our pins to make them available for use.
# Then use 'net' to recreate/hook into them.

#net 


#net my-jogspeed halui.axis.jog-speed <= arduino.speed
#net my-jogxminus halui.axis.x.minus <= arduino.x-minus
##net my-jogxplus halui.axis.x.plus <= arduino.x-plus
#net my-jogyminus halui.axis.y.minus <= arduino.y-minus
#net my-jogyplus halui.axis.y.plus <= arduino.y-plus

# Spindle power
#unlinkp spindle.0.on
#net spindle-On arduino.spindleEnable <= spindle.0.on

# Stop
#unlinkp iocontrol.0.user-enable-out
#net estop-out arduino.stop

#unlinkp joint.0.motor-pos-cmd
#net xpos-cmd joint.0.motor-pos-cmd => arduino.axis0-cmd

#unlinkp joint.1.motor-pos-cmd
#net ypos-cmd joint.1.motor-pos-cmd => arduino.axis1-cmd

#unlinkp joint.2.motor-pos-cmd
#net zpos-cmd joint.2.motor-pos-cmd => arduino.axis2-cmd


# create nets for all Buttons
#net key-01     <= STM_IO.IN.36 
#net key-001    <= STM_IO.IN.33 
#net key-0001   <= STM_IO.IN.35 
#net key-A-     <= STM_IO.IN.39 
#net key-A+     <= STM_IO.IN.42 
#net key-X-     <= STM_IO.IN.10
#net key-X+     <= STM_IO.IN.38 
#net key-Y-     <= STM_IO.IN.16 
#net key-Y+     <= STM_IO.IN.14 
#net key-Z-     <= STM_IO.IN.12 
#net key-Z+     <= STM_IO.IN.43 
#net key-JogLck <= STM_IO.IN.34 
#net key-LockX  <= STM_IO.IN.24 
#net key-LockY  <= STM_IO.IN.40 
#net key-LockZ  <= STM_IO.IN.11
#net key-LLkX   <= STM_IO.IN.31
#net key-RLkX   <= STM_IO.IN.25 
##net key-SpdlL  <= STM_IO.IN.23
#net key-SpdlR  <= STM_IO.IN.15 
#net key-TlChng <= STM_IO.IN.46 
#net key-Flood  <= STM_IO.IN.41
#net key-MMS    <= STM_IO.IN.30
#net key-Spare1 <= STM_IO.IN.44 
#net key-Spare2 <= STM_IO.IN.47 
#net key-Spare3 <= STM_IO.IN.27 
#net key-Spare4 <= STM_IO.IN.28
#net key-Spare5 <= STM_IO.IN.18 
#net key-Spare6 <= STM_IO.IN.21 
#net key-Spare7 <= STM_IO.IN.19 
#
# create nets for all LEDs

#net led-01      => STM_IO.OUT.39
#net led-001     => STM_IO.OUT.12
#net led-0001    => STM_IO.OUT.38
#net led-A-      => STM_IO.OUT.09
#net led-A+      => STM_IO.OUT.05
#net led-X-      => STM_IO.OUT.24
#net led-X+      => STM_IO.OUT.26
#net led-Y-      => STM_IO.OUT.42
#net led-Y+      => STM_IO.OUT.02
#net led-Z-      => STM_IO.OUT.07
#net led-Z+      => STM_IO.OUT.33
#net led-JogLck  => 3
#net led-LockX   => STM_IO.OUT.22
#net led-LockY   => STM_IO.OUT.25
#net led-LockZ   => STM_IO.OUT.35
#net led-LLkX    => STM_IO.OUT.21
#net led-RLkX    => STM_IO.OUT.20
#net led-SpdlL   => STM_IO.OUT.06
#net led-SpdlR   => STM_IO.OUT.18
#net led-TlChng  => STM_IO.OUT.15
#net led-Flood   => STM_IO.OUT.08
#net led-MMS     => STM_IO.OUT.14
#net led-Spare1  => STM_IO.OUT.04
#net led-Spare2  => STM_IO.OUT.11
#net led-Spare3  => STM_IO.OUT.40
#net led-Spare4  => STM_IO.OUT.23
#net led-Spare5  => STM_IO.OUT.19
#net led-Spare6  => STM_IO.OUT.10
#net led-Spare7  => STM_IO.OUT.45

####### rt components #######

loadrt not names=STM_IO.toolchg.not
addf STM_IO.toolchg.not   servo-thread


loadrt and2 names=STM_IO.toolchg.and
addf STM_IO.toolchg.and   servo-thread

loadrt or2 names=jog.enc.sel-X,jog.enc.sel-Y,jog.enc.sel-Z,jog.enc.rst-01,jog.enc.rst-001,jog.enc.rst-0001,STM_IO.led-start,STM_IO.led-stop,STM_IO.toolchg.or

addf jog.enc.sel-X   servo-thread
addf jog.enc.sel-Y   servo-thread
addf jog.enc.sel-Z   servo-thread
addf jog.enc.rst-01   servo-thread
addf jog.enc.rst-001  servo-thread
addf jog.enc.rst-0001 servo-thread
addf STM_IO.toolchg.or servo-thread


loadrt mux8 names=jog.enc.step-choice
addf jog.enc.step-choice servo-thread


loadrt toggleRst names=jog.enc.key-01,jog.enc.key-001,jog.enc.key-0001,axisLock.X,axisLock.Y,axisLock.Z
addf jog.enc.key-01   servo-thread
addf jog.enc.key-001  servo-thread
addf jog.enc.key-0001 servo-thread
addf axisLock.X servo-thread
addf axisLock.Y servo-thread
addf axisLock.Z servo-thread

# jog lock is toggled externally
loadrt toggle names=jog.jockLock,STM_IO.toolchg
addf jog.jockLock   servo-thread
addf STM_IO.toolchg servo-thread

# encoder smoothing 
loadrt ilowpass names=jog.enc.enc-smooth,jog.pot,STM_IO.feedPot
addf jog.enc.enc-smooth servo-thread
addf jog.pot            servo-thread
addf STM_IO.feedPot           servo-thread


setp jog.enc.enc-smooth.scale 1
setp jog.enc.enc-smooth.gain  0.025

setp jog.pot.scale 1
setp jog.pot.gain  0.025

setp STM_IO.feedPot.scale 1
setp STM_IO.feedPot.gain  0.025


loadrt conv_float_s32 names=conv_float_s32.feed,conv_float_s32.spindel,conv_float_s32.jog
addf conv_float_s32.feed servo-thread
addf conv_float_s32.spindel servo-thread
addf conv_float_s32.jog servo-thread

setp halui.feed-override.scale 0.01
setp halui.feed-override.direct-value true
setp hm2_5i25.0.7i77.0.0.analogin1-scalemax 230
net halui.feedanalog <= hm2_5i25.0.7i77.0.0.analogin1 => conv_float_s32.feed.in
net feedanalog conv_float_s32.feed.out => halui.feed-override.counts

setp halui.spindle.0.override.scale 0.01
setp halui.spindle.0.override.direct-value true
setp hm2_5i25.0.7i77.0.0.analogin2-scalemax 230
net halui.spindelanalog <= hm2_5i25.0.7i77.0.0.analogin2 => conv_float_s32.spindel.in
net spindelanalog conv_float_s32.spindel.out => halui.spindle.0.override.counts

#setp halui.feed-override.scale 0.01
#setp halui.feed-override.direct-value true
#setp hm2_5i25.0.7i77.0.0.analogin1-scalemax 230
#net halui.joganalog <= hm2_5i25.0.7i77.0.0.analogin1 => conv_float_s32.jog.in
#net joganalog conv_float_s32.jog.out => halui.axis.jog-speed



#net STM_IO.feedPot.raw      <= hm2_5i25.0.7i77.0.0.analogin0 => STM_IO.feedPot.in
#net STM_IO.feedPot          <= STM_IO.feedPot.out            => halui.spindle-override.value

#setp halui.spindle-override.direct-value 1


########## Jog Setup for Buttons and Encoder wheel! ########


#Enoder wheel setup


# connect the pysical pins to the toogle input as well as the reset or2 inputs

net jog.enc.key-01.key     <= STM_IO.IN.36 => jog.enc.key-01.in   => jog.enc.rst-001.in0  => jog.enc.rst-0001.in0
net jog.enc.key-001.key    <= STM_IO.IN.33 => jog.enc.key-001.in  => jog.enc.rst-01.in0   => jog.enc.rst-0001.in1
net kjog.enc.ey-0001.key   <= STM_IO.IN.35 => jog.enc.key-0001.in => jog.enc.rst-01.in1   => jog.enc.rst-001.in1

#connect the toggle reset input to the or2 reset outputs
net jog.enc.rst-01         <=  jog.enc.key-01.rst   => jog.enc.rst-01.out 
net jog.enc.rst-001        <=  jog.enc.key-001.rst  => jog.enc.rst-001.out
net rjog.enc.st-0001       <=  jog.enc.key-0001.rst => jog.enc.rst-0001.out

# step choices for the encoder wheel
setp jog.enc.step-choice.in0 0
setp jog.enc.step-choice.in1 0.001
setp jog.enc.step-choice.in2 0.01
setp jog.enc.step-choice.in4 0.1

# encoder scale is set for all axis
net jog.enc.step-choice <= jog.enc.step-choice.out
net jog.enc.step-choice => axis.x.jog-scale
net jog.enc.step-choice => axis.y.jog-scale
net jog.enc.step-choice => axis.z.jog-scale
#net jog.enc.step-choice => axis.a.jog-scale



net jog.enc.jogCounts.raw <= hm2_5i25.0.encoder.02.count     => jog.enc.enc-smooth.in

net jog.enc.jogCounts   <= jog.enc.enc-smooth.out
net jog.enc.jogCounts   => axis.x.jog-counts
net jog.enc.jogCounts   => axis.y.jog-counts
net jog.enc.jogCounts   => axis.z.jog-counts
#net jog.enc.jogCounts   => axis.a.jog-counts


setp axis.x.jog-vel-mode 1
setp axis.y.jog-vel-mode 1
setp axis.z.jog-vel-mode 1


# enable the active axis
net jog.enc.ena-x <= jog.enc.sel-X.out => axis.x.jog-enable => halui.joint.0.select
net jog.enc.ena-y <= jog.enc.sel-Y.out => axis.y.jog-enable => halui.joint.1.select
net jog.enc.ena-z <= jog.enc.sel-Z.out => axis.z.jog-enable => halui.joint.2.select
#net jog.enc.ena-a <= jog.enc.sel-A.out => axis.a.jog-enable => halui.joint.3.select

# connect leds and the step choice to the toggle outputs
net jog.enc.led-01     <= jog.enc.key-01.out        => jog.enc.step-choice.sel0
net jog.enc.led-01     => STM_IO.OUT.39
net jog.enc.led-001    <= jog.enc.key-001.out       => jog.enc.step-choice.sel1
net jog.enc.led-001    => STM_IO.OUT.12
net jog.enc.led-0001   <= jog.enc.key-0001.out      => jog.enc.step-choice.sel2
net jog.enc.led-0001   => STM_IO.OUT.38




# Jog button setup

#component for jogLock button
loadrt  jogCntrl names=jog.jogCntrl
addf    jog.jogCntrl        servo-thread




# save last selected axis for the encoder wheel axis select
loadrt select8 names=jog.select
addf jog.select servo-thread


# connect the buttons to the jog Lock component
net jog.jockLock  <= STM_IO.IN.34 => jog.jockLock.in

net jog.raw.key-x-pos       <= STM_IO.IN.38         => jog.jogCntrl.keys-0
net jog.raw.key-x-neg       <= STM_IO.IN.10         => jog.jogCntrl.keys-1
net jog.raw.key-y-pos       <= STM_IO.IN.14         => jog.jogCntrl.keys-2
net jog.raw.key-y-neg       <= STM_IO.IN.16         => jog.jogCntrl.keys-3
net jog.raw.key-z-pos       <= STM_IO.IN.43         => jog.jogCntrl.keys-4
net jog.raw.key-z-neg       <= STM_IO.IN.12         => jog.jogCntrl.keys-5
net jog.raw.key-a-pos       <= STM_IO.IN.42         => jog.jogCntrl.keys-6
net jog.raw.key-a-neg       <= STM_IO.IN.39         => jog.jogCntrl.keys-7
net jog.raw.jogLock         <= jog.jockLock.out     => jog.jogCntrl.joglocktoggle   => STM_IO.OUT.32


net jog.out.key-x-pos       <= jog.jogCntrl.out-0   
net jog.out.key-x-neg       <= jog.jogCntrl.out-1   
net jog.out.key-y-pos       <= jog.jogCntrl.out-2  
net jog.out.key-y-neg       <= jog.jogCntrl.out-3   
net jog.out.key-z-pos       <= jog.jogCntrl.out-4   
net jog.out.key-z-neg       <= jog.jogCntrl.out-5   
net jog.out.key-a-pos       <= jog.jogCntrl.out-6   
net jog.out.key-a-neg       <= jog.jogCntrl.out-7   


net jog.out.key-x-pos       => STM_IO.OUT.26        => halui.axis.x.plus
net jog.out.key-x-neg       => STM_IO.OUT.24        => halui.axis.x.minus
net jog.out.key-y-pos       => STM_IO.OUT.02        => halui.axis.y.plus
net jog.out.key-y-neg       => STM_IO.OUT.42        => halui.axis.y.minus
net jog.out.key-z-pos       => STM_IO.OUT.33        => halui.axis.z.plus
net jog.out.key-z-neg       => STM_IO.OUT.07        => halui.axis.z.minus
net jog.out.key-a-pos       => STM_IO.OUT.05
net jog.out.key-a-neg       => STM_IO.OUT.09








# jogLock outputs the last selected axis. Use this for the encoder wheel axis select thorugh ors.

net jog.lastAxis.data       <= jog.jogCntrl.lastActive => jog.select.sel

net jog.enc.sel-X-IN0       <= jog.select.out0      => jog.enc.sel-X.in0 
net jog.enc.sel-X-IN1       <= jog.select.out1      => jog.enc.sel-X.in1 

net jog.enc.sel-Y-IN0       <= jog.select.out2      => jog.enc.sel-Y.in0 
net jog.enc.sel-Y-IN1       <= jog.select.out3      => jog.enc.sel-Y.in1 

net jog.enc.sel-Z-IN0       <= jog.select.out4      => jog.enc.sel-Z.in0 
net jog.enc.sel-Z-IN1       <= jog.select.out5      => jog.enc.sel-Z.in1 



############# Axis Lock Control ###############

net axisLock.X.IN            <= STM_IO.IN.24        =>  axisLock.X.in
net axisLock.Y.IN            <= STM_IO.IN.40        =>  axisLock.Y.in
net axisLock.Z.IN            <= STM_IO.IN.11        =>  axisLock.Z.in

# net axisLock.X.rst        
# all axisLock resets are connected to halui.program.is-running

net axisLock.X               <= axisLock.X.out       => STM_IO.OUT.22   => hm2_5i25.0.7i77.0.0.output-04    =>  jog.jogCntrl.lock-0
net axisLock.Y               <= axisLock.Y.out       => STM_IO.OUT.25   => hm2_5i25.0.7i77.0.0.output-05    =>  jog.jogCntrl.lock-1
net axisLock.Z               <= axisLock.Z.out       => STM_IO.OUT.35   => hm2_5i25.0.7i77.0.0.output-06    =>  jog.jogCntrl.lock-2

setp jog.jogCntrl.lock-3 0 # fourth axis has no lock



################# Program Start stop pause setup ###################
# program start pause resume stop with two buttons
loadrt lut5 names=STM_IO.start.lut,STM_IO.pause.lut,STM_IO.resume.lut
addf STM_IO.start.lut    servo-thread
addf STM_IO.pause.lut    servo-thread
addf STM_IO.resume.lut   servo-thread


setp STM_IO.start.lut.function   0x8        # Start program. Button & is-idle & is-auto have to be true
setp STM_IO.pause.lut.function   0x2000     # pause when running. Button & is-running   & is-auto
setp STM_IO.resume.lut.function  0x2000000  # resume when paused. Button & is-is−paused & is-auto


#inputs for the lut5 
net  STM_IO.start.IN0      <= hm2_5i25.0.7i77.0.0.input-23 => STM_IO.start.lut.in-0  => STM_IO.pause.lut.in-0  => STM_IO.resume.lut.in-0
net  STM_IO.start.IN1      <= halui.program.is-idle      => STM_IO.start.lut.in-1  => STM_IO.pause.lut.in-1  => STM_IO.resume.lut.in-1   => STM_IO.led-stop.in1  
net  STM_IO.start.IN2      <= halui.program.is-running   => STM_IO.start.lut.in-2  => STM_IO.pause.lut.in-2  => STM_IO.resume.lut.in-2   => STM_IO.led-start.in0 => axisLock.X.rst   => axisLock.Y.rst   => axisLock.Z.rst 
net  STM_IO.start.IN3      <= halui.mode.is-auto         => STM_IO.start.lut.in-3  => STM_IO.pause.lut.in-3  => STM_IO.resume.lut.in-3
net  STM_IO.start.IN4      <= halui.program.is-paused    => STM_IO.start.lut.in-4  => STM_IO.pause.lut.in-4  => STM_IO.resume.lut.in-4   => STM_IO.led-start.in1 => STM_IO.led-stop.in0

#start program when lut1 is true
net  STM_IO.start.OUT      <= STM_IO.start.lut.out
net  STM_IO.start.OUT      => halui.program.run
net  STM_IO.start.OUT      => halui.mode.auto
#pause program when lut2 is true
net  STM_IO.pause.OUT      <= STM_IO.pause.lut.out
net  STM_IO.pause.OUT      => halui.program.pause
#resume program when lut3 is true
net  STM_IO.resume.OUT      <= STM_IO.resume.lut.out
net  STM_IO.resume.OUT      => halui.program.resume 

#stop program when stop is pressed
net  STM_IO.stop      <= hm2_5i25.0.7i77.0.0.input-22
net  STM_IO.stop      => halui.program.stop

#led start is on during running and paused
net STM_IO.led-start       <= STM_IO.led-start.out
net STM_IO.led-start       => STM_IO.OUT.17

#led stop is on during idle and paused
net STM_IO.led-stop       <= STM_IO.led-stop.out
net STM_IO.led-stop       => STM_IO.OUT.16




net spindle-manual-cw       <= STM_IO.IN.23 
net STM_IO.led-spindle-cw   <= halui.spindle.0.runs-forward     => STM_IO.toolchg.or.in0
net STM_IO.led-spindle-cw   => STM_IO.OUT.06

net spindle-manual-ccw      <= STM_IO.IN.15
net STM_IO.led-spindle-ccw   <= halui.spindle.0.runs-backward   => STM_IO.toolchg.or.in1
net STM_IO.led-spindle-ccw   => STM_IO.OUT.18

net spindle-manual-stop     <= STM_IO.IN.46
net spindle-manual-stop     => STM_IO.OUT.01



net STM_IO.clearMsg         <= STM_IO.IN.44
#net STM_IO.clearMsg         => axisui.notifications-clear
net STM_IO.clearMsg         => STM_IO.OUT.04



net STM_IO.toolchg.or.OUT       <= STM_IO.toolchg.or.out    => STM_IO.toolchg.not.in
net STM_IO.toolchg.not.OUT      <=  STM_IO.toolchg.not.out  => STM_IO.toolchg.and.in0
net STM_IO.toolchg.and.IN1      <= STM_IO.IN.26             => STM_IO.toolchg.and.in1
net STM_IO.toolchg.and.OUT      <=  STM_IO.toolchg.and.out  => STM_IO.toolchg.in
net STM_IO.toolchg              <= STM_IO.toolchg.out       =>  STM_IO.OUT.15           => hm2_5i25.0.7i77.0.0.output-08










