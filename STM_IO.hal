

loadrt toggle2nist count=1
addf toggle2nist.0 servo-thread

loadrt not names=STM_IO.toolchg.not,drives-ready-not,not_act_cal
addf STM_IO.toolchg.not   servo-thread
addf drives-ready-not servo-thread

loadrt and2 names=STM_IO.toolchg.and,jog.enc,jog.enc.andX,jog.enc.andY,jog.enc.andZ,probeIn.and,and_probe1,and_probe2,and_probe3
addf STM_IO.toolchg.and   servo-thread
addf jog.enc.andX servo-thread
addf jog.enc.andY servo-thread
addf jog.enc.andZ servo-thread
addf probeIn.and servo-thread

loadrt or2 names=jog.enc.sel-X,jog.enc.sel-Y,jog.enc.sel-Z,jog.enc.rst-01,jog.enc.rst-001,jog.enc.rst-0001,STM_IO.led-start,STM_IO.led-stop,STM_IO.toolchg.or,jog.enc.rst-selx,jog.enc.rst-sely,jog.enc.rst-selz,probeIn.or


addf jog.enc.sel-X   servo-thread
addf jog.enc.sel-Y   servo-thread
addf jog.enc.sel-Z   servo-thread
addf jog.enc.rst-01   servo-thread
addf jog.enc.rst-001  servo-thread
addf jog.enc.rst-0001 servo-thread
addf STM_IO.toolchg.or servo-thread
addf jog.enc.rst-selx servo-thread
addf jog.enc.rst-sely servo-thread
addf jog.enc.rst-selz servo-thread
addf probeIn.or servo-thread


loadrt mux8 names=jog.enc.step-choice
addf jog.enc.step-choice servo-thread


loadrt toggleRst names=jog.enc.key-01,jog.enc.key-001,jog.enc.key-0001,axisLock.X,axisLock.Y,axisLock.Z,jogSel.X,jogSel.Y,jogSel.Z
addf jog.enc.key-01   servo-thread
addf jog.enc.key-001  servo-thread
addf jog.enc.key-0001 servo-thread
addf axisLock.X servo-thread
addf axisLock.Y servo-thread
addf axisLock.Z servo-thread
addf jogSel.X servo-thread
addf jogSel.Y servo-thread
addf jogSel.Z servo-thread

# jog lock is toggled externally
loadrt toggle names=jog.jockLock,STM_IO.toolchg,STM_IO.coolant
addf jog.jockLock   servo-thread
addf STM_IO.toolchg servo-thread
addf STM_IO.coolant servo-thread

# encoder smoothing 
loadrt ilowpass names=jog.enc.enc-smooth,jog.pot,STM_IO.feedPot
addf jog.enc.enc-smooth servo-thread
addf jog.pot            servo-thread
addf STM_IO.feedPot           servo-thread


setp jog.enc.enc-smooth.scale 1
setp jog.enc.enc-smooth.gain  0.025

setp jog.pot.scale 1
setp jog.pot.gain  0.025

setp STM_IO.feedPot.scale 1
setp STM_IO.feedPot.gain  0.025


loadrt scaleAnalog names=feedOverride,spindleOverride,jogOverride

addf feedOverride            servo-thread
addf spindleOverride         servo-thread
addf jogOverride             servo-thread

setp halui.feed-override.scale 0.01
setp halui.feed-override.direct-value true
setp feedOverride.in-min 1000  
setp feedOverride.in-max 14000
setp feedOverride.out-min 0  
setp feedOverride.out-max 150
net halui.feed-raw  <= lcec.0.IoBoard.AN.5          => feedOverride.in
net halui.feed-conv <= feedOverride.out             => halui.feed-override.counts

setp halui.spindle.0.override.scale 0.01
setp halui.spindle.0.override.direct-value true
setp spindleOverride.in-min 1000  
setp spindleOverride.in-max 14000
setp spindleOverride.out-min 0  
setp spindleOverride.out-max 125
net halui.spindle-raw  <= lcec.0.IoBoard.AN.3          => spindleOverride.in
net halui.spindle-conv <= spindleOverride.out          => halui.spindle.0.override.counts


setp jogOverride.in-min 1000  
setp jogOverride.in-max 14000
setp jogOverride.out-min 50  
setp jogOverride.out-max 3000
net halui.jogAnalog-raw  <= lcec.0.IoBoard.AN.4          => jogOverride.in
net halui.jogAnalog-conv <= jogOverride.outFloat     => halui.axis.jog-speed


########## Jog Setup for Buttons and Encoder wheel! ########


#Enoder wheel setup


# connect the pysical pins to the toogle input as well as the reset or2 inputs
net jog.enc.key-01.key     <= lcec.0.IoBoard.IN1.in-01 => jog.enc.key-01.in   => jog.enc.rst-001.in0  => jog.enc.rst-0001.in0
net jog.enc.key-001.key    <= lcec.0.IoBoard.IN1.in-05 => jog.enc.key-001.in  => jog.enc.rst-01.in0   => jog.enc.rst-0001.in1
net kjog.enc.ey-0001.key   <= lcec.0.IoBoard.IN1.in-03 => jog.enc.key-0001.in => jog.enc.rst-01.in1   => jog.enc.rst-001.in1

# axis selection with dedicated keys
net jogSel.X.IN            <= lcec.0.IoBoard.IN1.in-00     =>  jogSel.X.in   => jog.enc.rst-sely.in0   => jog.enc.rst-selz.in0
net jogSel.Y.IN            <= lcec.0.IoBoard.IN2.in-06     =>  jogSel.Y.in   => jog.enc.rst-selx.in0   => jog.enc.rst-selz.in1
net jogSel.Z.IN            <= lcec.0.IoBoard.IN1.in-11     =>  jogSel.Z.in   => jog.enc.rst-selx.in1   => jog.enc.rst-sely.in1

#connect the toggle reset input to the or2 reset outputs
net jog.enc.rst-selx       <= jogSel.X.rst => jog.enc.rst-selx.out
net jog.enc.rst-sely       <= jogSel.Y.rst => jog.enc.rst-sely.out
net jog.enc.rst-selz       <= jogSel.Z.rst => jog.enc.rst-selz.out

#connect the toggle reset input to the or2 reset outputs
net jog.enc.rst-01         <=  jog.enc.key-01.rst   => jog.enc.rst-01.out 
net jog.enc.rst-001        <=  jog.enc.key-001.rst  => jog.enc.rst-001.out
net rjog.enc.st-0001       <=  jog.enc.key-0001.rst => jog.enc.rst-0001.out

# step choices for the encoder wheel
setp jog.enc.step-choice.in0 0
setp jog.enc.step-choice.in1 0.1
setp jog.enc.step-choice.in2 0.01
setp jog.enc.step-choice.in4 0.001

# encoder scale is set for all axis
net jog.enc.step-choice <= jog.enc.step-choice.out
net jog.enc.step-choice => axis.x.jog-scale
net jog.enc.step-choice => axis.y.jog-scale
net jog.enc.step-choice => axis.z.jog-scale
#net jog.enc.step-choice => axis.a.jog-scale


loadrt conv_u32_s32 names=jog.enc.jogEncoder
addf jog.enc.jogEncoder          servo-thread



# TODO Signed 32

net jog.enc.jogCounts.raw <= lcec.0.IoBoard.ENC.2     => jog.enc.jogEncoder.in
net jog.enc.jogCounts.s32 <= jog.enc.jogEncoder.out     => jog.enc.enc-smooth.in

net jog.enc.jogCounts   <= jog.enc.enc-smooth.out
net jog.enc.jogCounts   => axis.x.jog-counts
net jog.enc.jogCounts   => axis.y.jog-counts
net jog.enc.jogCounts   => axis.z.jog-counts
# net jog.enc.jogCounts   => axis.a.jog-counts


setp axis.x.jog-vel-mode 1
setp axis.y.jog-vel-mode 1
setp axis.z.jog-vel-mode 1


# enable the active axis  
net jog.enc.ena-sel-x <= jogSel.X.out => jog.enc.andX.in0
net jog.enc.ena-sel-y <= jogSel.Y.out => jog.enc.andY.in0
net jog.enc.ena-sel-z <= jogSel.Z.out => jog.enc.andZ.in0

# disable the active axis if the drives are not ready
net jog.enc.ena-x <= jog.enc.andX.out => axis.x.jog-enable => halui.joint.0.select
net jog.enc.ena-y <= jog.enc.andY.out => axis.y.jog-enable => halui.joint.1.select
net jog.enc.ena-z <= jog.enc.andZ.out => axis.z.jog-enable => halui.joint.2.select


#net jog.enc.ena-x <= jog.enc.sel-X.out => axis.x.jog-enable => halui.joint.0.select
#net jog.enc.ena-y <= jog.enc.sel-Y.out => axis.y.jog-enable => halui.joint.1.select
#net jog.enc.ena-z <= jog.enc.sel-Z.out => axis.z.jog-enable => halui.joint.2.select
#net jog.enc.ena-a <= jog.enc.sel-A.out => axis.a.jog-enable => halui.joint.3.select

# connect leds and the step choice to the toggle outputs
net jog.enc.led-01     <= jog.enc.key-01.out        => jog.enc.step-choice.sel0
net jog.enc.led-01     => lcec.0.IoBoard.OUT3.out-01
net jog.enc.led-001    <= jog.enc.key-001.out       => jog.enc.step-choice.sel1
net jog.enc.led-001    => lcec.0.IoBoard.OUT3.out-05
net jog.enc.led-0001   <= jog.enc.key-0001.out      => jog.enc.step-choice.sel2
net jog.enc.led-0001   => lcec.0.IoBoard.OUT3.out-03

#connect leds for axis selection
net jog.enc.ena-x => lcec.0.IoBoard.OUT2.out-02
net jog.enc.ena-y => lcec.0.IoBoard.OUT2.out-14
net jog.enc.ena-z => lcec.0.IoBoard.OUT1.out-12



# Jog button setup

#component for jogLock button
loadrt  jogCntrl names=jog.jogCntrl
addf    jog.jogCntrl        servo-thread




# save last selected axis for the encoder wheel axis select
loadrt select8 names=jog.select
addf jog.select servo-thread


# connect the buttons to the jog Lock component
net jog.jockLock  <= lcec.0.IoBoard.IN2.in-09 => jog.jockLock.in

net jog.raw.key-x-pos       <= lcec.0.IoBoard.IN1.in-04         => jog.jogCntrl.keys-0
net jog.raw.key-x-neg       <= lcec.0.IoBoard.IN1.in-06         => jog.jogCntrl.keys-1
net jog.raw.key-y-pos       <= lcec.0.IoBoard.IN2.in-05         => jog.jogCntrl.keys-2
net jog.raw.key-y-neg       <= lcec.0.IoBoard.IN2.in-15         => jog.jogCntrl.keys-3
net jog.raw.key-z-pos       <= lcec.0.IoBoard.IN2.in-00         => jog.jogCntrl.keys-4
net jog.raw.key-z-neg       <= lcec.0.IoBoard.IN2.in-03         => jog.jogCntrl.keys-5
net jog.raw.key-a-pos       <= lcec.0.IoBoard.IN1.in-12         => jog.jogCntrl.keys-6
net jog.raw.key-a-neg       <= lcec.0.IoBoard.IN1.in-08         => jog.jogCntrl.keys-7
net jog.raw.jogLock         <= jog.jockLock.out     => jog.jogCntrl.joglocktoggle   => lcec.0.IoBoard.OUT1.out-00

net jog.out.key-x-pos       <= jog.jogCntrl.out-0   
net jog.out.key-x-neg       <= jog.jogCntrl.out-1   
net jog.out.key-y-pos       <= jog.jogCntrl.out-2  
net jog.out.key-y-neg       <= jog.jogCntrl.out-3   
net jog.out.key-z-pos       <= jog.jogCntrl.out-4   
net jog.out.key-z-neg       <= jog.jogCntrl.out-5   
net jog.out.key-a-pos       <= jog.jogCntrl.out-6   
net jog.out.key-a-neg       <= jog.jogCntrl.out-7   


net jog.out.key-x-pos       => lcec.0.IoBoard.OUT1.out-14        => halui.axis.x.plus
net jog.out.key-x-neg       => lcec.0.IoBoard.OUT1.out-08        => halui.axis.x.minus
net jog.out.key-y-pos       => lcec.0.IoBoard.OUT2.out-12        => halui.axis.y.plus
net jog.out.key-y-neg       => lcec.0.IoBoard.OUT1.out-13        => halui.axis.y.minus
net jog.out.key-z-pos       => lcec.0.IoBoard.OUT1.out-03        => halui.axis.z.plus
net jog.out.key-z-neg       => lcec.0.IoBoard.OUT2.out-09        => halui.axis.z.minus
net jog.out.key-a-pos       => lcec.0.IoBoard.OUT1.out-07
net jog.out.key-a-neg       => lcec.0.IoBoard.OUT1.out-09








# # jogLock outputs the last selected axis. Use this for the encoder wheel axis select thorugh ors.

# net jog.lastAxis.data       <= jog.jogCntrl.lastActive => jog.select.sel

# #net jog.enc.sel-X-IN0       <= jog.select.out0      => jog.enc.sel-X.in0 
# #net jog.enc.sel-X-IN1       <= jog.select.out1      => jog.enc.sel-X.in1 

# #net jog.enc.sel-Y-IN0       <= jog.select.out2      => jog.enc.sel-Y.in0 
# #net jog.enc.sel-Y-IN1       <= jog.select.out3      => jog.enc.sel-Y.in1 

# #net jog.enc.sel-Z-IN0       <= jog.select.out4      => jog.enc.sel-Z.in0 
# #net jog.enc.sel-Z-IN1       <= jog.select.out5      => jog.enc.sel-Z.in1 



############# Axis Lock Control ###############

# net axisLock.X.IN            <= STM_IO.IN.43        =>  axisLock.X.in
# net axisLock.Y.IN            <= STM_IO.IN.09        =>  axisLock.Y.in
# net axisLock.Z.IN            <= STM_IO.IN.35        =>  axisLock.Z.in

# net axisLock.X.rst        
# all axisLock resets are connected to halui.program.is-running

# net axisLock.X               <= axisLock.X.out       => lcec.0.IoBoard.OUT1.out-01   => hm2_7i76e.0.7i77.0.2.output-04    =>  jog.jogCntrl.lock-0
# net axisLock.Y               <= axisLock.Y.out       => lcec.0.IoBoard.OUT2.out-05   => hm2_7i76e.0.7i77.0.2.output-05    =>  jog.jogCntrl.lock-1
# net axisLock.Z               <= axisLock.Z.out       => lcec.0.IoBoard.OUT2.out-01   => hm2_7i76e.0.7i77.0.2.output-06    =>  jog.jogCntrl.lock-2

# setp jog.jogCntrl.lock-3 0 # fourth axis has no lock



################# Program Start stop pause setup ###################
# program start pause resume stop with two buttons
loadrt lut5 names=STM_IO.start.lut,STM_IO.pause.lut,STM_IO.resume.lut,lut_inhibit,lut_midpoint,lut_rotation,lut_distance
addf STM_IO.start.lut    servo-thread
addf STM_IO.pause.lut    servo-thread
addf STM_IO.resume.lut   servo-thread


setp STM_IO.start.lut.function   0x8        # Start program. Button & is-idle & is-auto have to be true
setp STM_IO.pause.lut.function   0x2000     # pause when running. Button & is-running   & is-auto
setp STM_IO.resume.lut.function  0x2000000  # resume when paused. Button & is-is−paused & is-auto


#inputs for the lut5 
net  STM_IO.start.IN0      <= lcec.0.IoBoard.IN3.in-01 => STM_IO.start.lut.in-0  => STM_IO.pause.lut.in-0  => STM_IO.resume.lut.in-0
net  STM_IO.start.IN1      <= halui.program.is-idle      => STM_IO.start.lut.in-1  => STM_IO.pause.lut.in-1  => STM_IO.resume.lut.in-1   => STM_IO.led-stop.in1  
net  STM_IO.start.IN2      <= halui.program.is-running   => STM_IO.start.lut.in-2  => STM_IO.pause.lut.in-2  => STM_IO.resume.lut.in-2   => STM_IO.led-start.in0 => axisLock.X.rst   => axisLock.Y.rst   => axisLock.Z.rst 
net  STM_IO.start.IN3      <= halui.mode.is-auto         => STM_IO.start.lut.in-3  => STM_IO.pause.lut.in-3  => STM_IO.resume.lut.in-3
net  STM_IO.start.IN4      <= halui.program.is-paused    => STM_IO.start.lut.in-4  => STM_IO.pause.lut.in-4  => STM_IO.resume.lut.in-4   => STM_IO.led-start.in1 => STM_IO.led-stop.in0

#start program when lut1 is true
net  STM_IO.start.OUT      <= STM_IO.start.lut.out
net  STM_IO.start.OUT      => halui.program.run
net  STM_IO.start.OUT      => halui.mode.auto
#pause program when lut2 is true
net  STM_IO.pause.OUT      <= STM_IO.pause.lut.out
net  STM_IO.pause.OUT      => halui.program.pause
#resume program when lut3 is true
net  STM_IO.resume.OUT      <= STM_IO.resume.lut.out
net  STM_IO.resume.OUT      => halui.program.resume 

#stop program when stop is pressed
net  STM_IO.stop      <= lcec.0.IoBoard.IN3.in-00
net  STM_IO.stop      => halui.program.stop

#led start is on during running and paused
net STM_IO.led-start       <= STM_IO.led-start.out
net STM_IO.led-start       => lcec.0.IoBoard.OUT2.out-06

#led stop is on during idle and paused
net STM_IO.led-stop       <= STM_IO.led-stop.out
net STM_IO.led-stop       => lcec.0.IoBoard.OUT2.out-04




net spindle-manual-cw       <= lcec.0.IoBoard.IN2.in-10
net STM_IO.led-spindle-cw   <= halui.spindle.0.runs-forward     => STM_IO.toolchg.or.in0
net STM_IO.led-spindle-cw   => lcec.0.IoBoard.OUT1.out-02

net spindle-manual-ccw      <= lcec.0.IoBoard.IN2.in-12
net STM_IO.led-spindle-ccw   <= halui.spindle.0.runs-backward   => STM_IO.toolchg.or.in1
net STM_IO.led-spindle-ccw   => lcec.0.IoBoard.OUT2.out-10

net spindle-manual-stop     <= lcec.0.IoBoard.IN1.in-13
net spindle-manual-stop     => lcec.0.IoBoard.OUT1.out-05



# net STM_IO.clearMsg         <= STM_IO.IN.27
# #net STM_IO.clearMsg         => axisui.notifications-clear
# net STM_IO.clearMsg         => S TM_IO.OUT.23





#### DRIVE READY/FAULT SIGNALS
loadrt or4 names=motion.driveFault
loadrt or3 names=motion.driveReady
addf motion.driveReady   servo-thread
addf motion.driveFault   servo-thread

net x-error => lcec.0.A3_X.srv-fault => motion.driveFault.in0
net y-error => lcec.0.A3_Y.srv-fault => motion.driveFault.in1
net z-error => lcec.0.A3_Z.srv-fault => motion.driveFault.in2
net spindle-error => lcec.0.0-Spindle.srv-fault => motion.driveFault.in3


net x-ready <= lcec.0.A3_X.srv-oper-enabled => motion.driveReady.in0
net y-ready <= lcec.0.A3_Y.srv-oper-enabled => motion.driveReady.in1
net z-ready <= lcec.0.A3_Z.srv-oper-enabled => motion.driveReady.in2
net drives-ready <= motion.driveReady.out => drives-ready-not.in => jog.enc.andX.in1 => jog.enc.andY.in1 => jog.enc.andZ.in1



net drivers-ready-not <= drives-ready-not.out => motion.feed-inhibit 

# TODO clear fault
net STM_IO.clearDriveFault  <=  lcec.0.IoBoard.IN2.in-01
net STM_IO.clearDriveFault  => lcec.0.A3_X.srv-fault-reset => lcec.0.A3_Y.srv-fault-reset => lcec.0.A3_Z.srv-fault-reset => lcec.0.0-Spindle.srv-fault-reset

net driveFaultLED <= motion.driveFault.out => lcec.0.IoBoard.OUT1.out-04







### TOOLCHANGE LOGIC

net STM_IO.toolchg.or.OUT       <= STM_IO.toolchg.or.out    => STM_IO.toolchg.not.in
net STM_IO.toolchg.not.OUT      <=  STM_IO.toolchg.not.out  => STM_IO.toolchg.and.in0
net STM_IO.toolchg.and.IN1      <= lcec.0.IoBoard.IN2.in-08 => STM_IO.toolchg.and.in1
net STM_IO.toolchg.and.OUT      <=  STM_IO.toolchg.and.out  => STM_IO.toolchg.in
net STM_IO.toolchg              <= STM_IO.toolchg.out       =>  lcec.0.IoBoard.OUT2.out-08           => lcec.0.EK.DOUT2.dout-3



### Probe and Toollength logic
net probeInOr1 <= lcec.0.EK.DIN1.din-10-not => probeIn.or.in0

net probeInAnd1 <= lcec.0.EK.DIN1.din-12 => probeIn.and.in0
net probeInAnd2 <= lcec.0.EK.DIN1.din-11-not => probeIn.and.in1

net probeInOr2 <= probeIn.and.out => probeIn.or.in1

#net probeInOrOut <= probeIn.or.out 



# #Seems these need to be here to keep check boxes visible
# net coolant-flood     <=  iocontrol.0.coolant-flood


# # Coolant switch
# net flood-toggle toggle2nist.0.in <= STM_IO.IN.47
# net flood-on toggle2nist.0.on => halui.flood.on
# net flood-off toggle2nist.0.off => halui.flood.off
# net flood-control <= halui.flood.is-on => toggle2nist.0.is-on 
# #net flood-control => lcec.0.IoBoard.OUT1.out-11

# # Coolant LED control
# #net flood-control halui.flood.is-on => hm2_7i76e.0.7i76.0.0.output-14
# net flood-control  halui.flood.is-on => lcec.0.IoBoard.OUT1.out-11

